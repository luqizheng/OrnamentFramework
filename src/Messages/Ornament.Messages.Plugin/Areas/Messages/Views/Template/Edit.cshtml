@using Ornament
@using Ornament.Messages.Config
@using Ornament.Messages.Notification.Senders
@using Ornament.Models
@using Ornament.Web.UI.Theme
@using Qi.Web
@using Basic = Ornament.Properties.Resources
@model Ornament.Messages.Plugin.Areas.Messages.Models.Messages.MessageTemplateModel

@{
    ViewBag.Title = Html.GetEmbededResourceString("title");
    Layout = OrnamentContext.Configuration.Layout();
    string outputContents = "[]";


    if (Model != null && Model.Contents.Count != 0)
    {
        outputContents = JsonHelper.ToJson(Model.Contents);
    }
}

@section pageTitle  
{
    <h2>@Html.GetEmbededResourceString("title")</h2>
}

<form id="editTemp" ms-controller="editTemp" method="POST" action="@Url.Action("Save")">
    @using (Panel panel = Html.Panel())
    {
        @panel.Header(@<text>

                           <h2>Message Template</h2>


                       </text>)

        @panel.Body(@<text>



                         <ul class="nav nav-tabs">
                             <li class="active">
                                 <a data-toggle="tab" href="#tab7">
                                     <i class="fa fa-list"></i>@Html.GetEmbededResourceString("Tab_title_Basic")
                                 </a>
                             </li>
                             <li class="">
                                 <a data-toggle="tab" href="#tab8"><i class="fa fa-pencil"></i>@Html.GetEmbededResourceString("Tab_title_Content")</a>
                             </li>
                         </ul>
                         <div class="tab-content">

                             @Html.AntiForgeryToken()
                             @Html.HiddenFor(model => model.Id)
                             @Html.ValidationSummary(true)
                             <div id="tab7" class="tab-pane active">
                                 <div class="col-lg-12 col-xs-12 col-sm-12">
                                     @* 如果是内置，一定是不能呢改名字，因为是有程序初始化生成的 *@
                                     <div class="form-group">
                        
                                         @Html.LabelFor(s => s.Name, new {@class = "control-label"})
                        
                                         @Html.TextBoxFor(s => s.Name, "", new
                                         {
                                             @class = "form-control",
                                             HtmlAttributes = new Dictionary<string, object>
                                             {
                                                 {"ms-duplex", "Name"}
                                             }
                                         })
                                         @Html.ValidationMessageFor(s => s.Name)
                        
                                     </div>
                                     <div class="form-group">
                        
                                         @Html.LabelFor(s => s.Senders, new {@class = "control-label"})
                        
                                         @foreach (dynamic sender in ViewBag.Senders)
                                         {
                                             bool check = (Model.Senders ?? new Sender[0]).Any(s => s.Id == sender.Id);

                                             <label class="checkbox-inline" title="@sender.Remarks">
                                                 <input type="checkbox" value="@sender.Id" name="Senders" class="checkbox"
                                                     @(check ? "checked='checked'" : "") />
                                                 <span>@sender.Name</span>
                                             </label>
                                         }
                        
                                     </div>
                                     <div class="form-group">
                        
                                         @Html.LabelFor(s => s.Remark, new {@class = "control-label"})
                        

                                         @Html.TextAreaFor(s => s.Remark, 5, 20,
                                             new
                                             {
                                                 @class = "form-control",
                                                 HtmlAttributes = new Dictionary<string, object>
                                                 {
                                                     {"ms-duplex", "Remark"}
                                                 }
                                             })
                                         @Html.ValidationMessageFor(s => s.Remark)
                        
                                     </div>
                                 </div>
                             </div>
                             <div id="tab8" class="tab-pane">
                                 <div class="row">
                                     <div class="col-lg-8 col-xs-8 col-sm-8">
                                         <div class="form-group">

                                             <label for="Language" class="control-label">Language:</label>

                                             <select id="Language" class="form-control" ms-duplex-string="Language">
                                                 @{
                                                     LanguageCollection langs = OrnamentContext.Configuration.Languages;
                                                     foreach (Language lang in langs)
                                                     {
                                                         <option value="@lang.Key">@lang.Name ( @lang.Key )</option>
                                                     }
                                                 }
                                             </select>

                                         </div>
                                         <div class="form-group">

                                             <label for="subject" class="control-label">Subject</label>

                                             <input id="subject" class="form-control" type="text" style="width: 100%"
                                                    ms-duplex="content.Subject" />

                                         </div>
                                         <div class="form-group">
                                             @Html.EditorFor(s => s.Content, new
                                             {
                                                 HtmlAttributes = new Dictionary<string, object>
                                                 {
                                                     {"ms-duplex", "content.Value"}
                                                 }
                                             })
                                         </div>
                                     </div>
                                     <div class="col-lg-4 col-xs-4 col-sm-4">
                                         <ul>
                                             @foreach (string key in NotifySenderManager.Instance.Variables.Keys)
                                             {
                                                 <li>[@key]-@NotifySenderManager.Instance.Variables[key]</li>
                                             }
                                         </ul>
                                     </div>
                                 </div>
                             </div>
                             <div class="form-actions">
                                 <button type="submit" id="subMitData" class="btn btn-primary"><i class="fa fa-save"></i>@Basic.Save</button>
                             </div>
                         </div>

                     </text>)
    }
</form>




@section scripts {

    <script type="text/javascript">


        require(["@Scripts.Url("~/messages/scripts/template/edit")"], function(init) {
            var contents = @Html.Raw(outputContents);
            var template = {
                Remark: '@Html.Raw(JsonHelper.ToJson(Model.Remark ?? ""))',
                Name: '@Model.Name',
                Contents: contents
            };
            init.init(template);
            clearPageVariable.push(init.clear);
        });
    </script>
}