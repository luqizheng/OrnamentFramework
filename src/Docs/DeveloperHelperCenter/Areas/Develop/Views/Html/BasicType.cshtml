@using Ornament
@using Ornament.Web
@using Ornament.Web.UI.Theme
@model DeveloperHelperCenter.Areas.Develop.Models.BasicEditors
@{
    ViewBag.Title = "Basic Type Html Controls ";
    Layout = OrnamentContext.Configuration.Layout();
}

@using (Panel panel = Html.Panel(new PanelOption
{
    Id = "orgPanel",
}, "col-md-4 col-lg-4 col-xs-4 col-sm-4"))
{
    @panel.Body(@<text>
    <form method="POST" action="@Url.Action("BasicType")" id="formExample1">
        <div class="form-group">
            @Html.LabelFor(s => s.Int32, new { @class = "control-label" })
            @Html.EditorFor(s => s.Int32, new { HtmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(s => s.Int32)
            @Html.DescriptionFor(s => s.Int32)
        </div>

        <div class="form-group">
            @Html.LabelFor(s => s.Int64, new { @class = "control-label" })
            @Html.EditorFor(s => s.Int64, new { HtmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(s => s.Int64)
        </div>
        <div class="form-group">
            @Html.LabelFor(s => s.Money, new { @class = "control-label" })
            @Html.EditorFor(s => s.Money, new { HtmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(s => s.Money)
        </div>

        <div class="form-group">
            @Html.LabelFor(s => s.String, new { @class = "control-label" })
            @Html.EditorFor(s => s.String, new { HtmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(s => s.String)
        </div>

        <div class="form-group">
            @Html.LabelFor(s => s.Textarea)
            @Html.EditorFor(s => s.Textarea, new { HtmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(s => s.Textarea)
        </div>

        <div class="form-group">
            @Html.LabelFor(s => s.Decimal, new { @class = "control-label" })
            @Html.EditorFor(s => s.Decimal, new { HtmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(s => s.Decimal)
        </div>
        <div class="form-group">
            @Html.LabelFor(s => s.Date, new { @class = "control-label" })

            <div class="input-group">
                @Html.EditorFor(model => model.Date, new { HtmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="note">
                @Html.ValidationMessageFor(model => model.Date)
            </div>

        </div>

        <div class="form-group">
            @Html.LabelFor(s => s.Time, new { @class = "control-label" })

            <div class="input-group">
                @Html.EditorFor(model => model.Time, new { HtmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="note">
                @Html.ValidationMessageFor(model => model.Time)
            </div>
        </div>



        <div class="form-actions">
            <button>
                submit
            </button>
        </div>
    </form>
    </text>)
}
@using (Panel panel = Html.Panel(new PanelOption
{
    Id = "example",
}, "col-md-6 col-lg-6 col-xs-6 col-sm-6"))
{
    @panel.Header(@<text>
    <h2>Code Example</h2>
    </text>)

    @panel.Body(@<text>
    <pre class="prettyprint">
        <code>
public class BasicEditors
{
        public BasicEditors()
        {
            Int32 = 6;
            Int64 = 1800;
            Date = DateTime.Now;
        }

        [Range(5, 20)]
        public Int32 Int32 { get; set; }

        [QiRange(900D, 10000d, 100D)]
        public Int64 Int64 { get; set; }

        public string String { get; set; }
        [MaxLength(40)]
        [DataType(DataType.MultilineText)]
        public String Textarea { get; set; }

        [QiRange(10D, 15d, 0.2D)]
        public Decimal Decimal { get; set; }

        [QiRange(1D, 100d, 0.5D)]
        [DataType(DataType.Currency)]
        [UIHint("Currency")]
        public Decimal Money { get; set; }

        [DataType(DataType.Time)]
        public Time Time { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "yyyy-MM-dd")]
        [DateRange("-40y", "+10y", "yyyy-MM-dd", "yy-mm-dd")]
        public DateTime? Date { get; set; }
}
</code>
</pre>
    </text>)
}
@section scripts
{
    <link href="/Content/Prettify/prettify.css" rel="stylesheet" />
    <script src="/Scripts/Prettify/run_prettify.js"></script>
    <script type="text/javascript">
        require(['require', '/scripts/config.js'], function (require) {
            require(["/Develop/Scripts/Html/BasicType.js"], function (m) {
                m.Init();
            });
        })

    </script>

}