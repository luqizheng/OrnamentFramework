@using Ornament.MVCWebFrame.Models
@using Ornament.MemberShip
@using Qi.Web.Mvc
@model Ornament.MVCWebFrame.Areas.Projects.Models.ProjectModel
@{
    var performers = (IList<IPerformer>)ViewData["performers"];
}
@Html.Hidden("Product", this.Model.Product.Id)
<div class="control-group">
    @Html.LabelFor(model => model.Name, new { @class = "control-label" })
    <div class="controls">
        @Html.TextBoxFor(model => model.Name, new { tabindex = 1 })
        @Html.ValidationMessageFor(model => model.Name)
    </div>
</div>
<div class="control-group">
    <label class="control-label">@Html.ContentFor(model => model.ProjectManager)</label>
    <div class="controls" id="panel-testers">
        <select id="ProjectManager" name="ProjectManager" multiple="multiple" tabindex="2"
            class="multiChoice">
            @foreach (IPerformer p in performers)
            {
                string icon = (p is UserGroup) ? "icon-group" : "icon-user";
                <option value="@p.Id" icon="@icon">@p.Name</option>
            }
        </select>
        @Html.ValidationMessageFor(model => model.Testers)
    </div>
</div>
<div class="control-group">
    <label class="control-label">@Html.ContentFor(model => model.TesterManager)</label>
    <div class="controls" id="panel-testers">
        <select name="TesterManager" multiple="multiple" tabindex="2" class="multiChoice">
            @foreach (IPerformer p in performers)
            {
                string icon = (p is UserGroup) ? "icon-group" : "icon-user";
                <option value="@p.Id" icon="@icon">@p.Name</option>
            }
        </select>
        @Html.ValidationMessageFor(model => model.Testers)
    </div>
</div>
<div class="control-group">
    <label class="control-label">@Html.ContentFor(model => model.Testers)</label>
    <div class="controls" id="panel-testers">
        <select name="Testers" multiple="multiple" tabindex="2" class="multiChoice">
            @foreach (IPerformer p in performers)
            {
                string icon = (p is UserGroup) ? "icon-group" : "icon-user";
                <option value="@p.Id" icon="@icon">@p.Name</option>
            }
        </select>
        @Html.ValidationMessageFor(model => model.Testers)
    </div>
</div>
<div class="control-group">
    <label class="control-label">@Html.ContentFor(model => model.DeveloperManager)</label>
    <div class="controls">
        <select name="DeveloperManager" multiple="multiple" class="multiChoice">
            @foreach (IPerformer p in performers)
            {
                string icon = (p is UserGroup) ? "icon-group" : "icon-user";
                <option value="@p.Id" icon="@icon">@p.Name</option>
            }
        </select>
        @Html.ValidationMessageFor(model => model.Developers)
    </div>
</div>
<div class="control-group">
    <label class="control-label">@Html.ContentFor(model => model.Developers)</label>
    <div class="controls">
        <select name="Developers" multiple="multiple" class="multiChoice">
            @foreach (IPerformer p in performers)
            {
                string icon = (p is UserGroup) ? "icon-group" : "icon-user";
                <option value="@p.Id" icon="@icon">@p.Name</option>
            }
        </select>
        @Html.ValidationMessageFor(model => model.Developers)
    </div>
</div>
